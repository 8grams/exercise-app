stages:
  - test
  - build
  - verify
  - notify

.for_development:
  environment:
    name: development
  variables:
    DOCKER_IMAGE_TAG: latest
  only:
    - main

.for_release:
  environment:
    name: release

.build:
  stage: build
  services:
    - docker:dind
  script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - docker pull ${CI_REGISTRY_IMAGE}:${DOCKER_IMAGE_TAG} || true .
    - docker build .
    - docker push ${CI_REGISTRY_IMAGE}:${DOCKER_IMAGE_TAG}

development:publish:
  extends:
    - .build
    - .for_development

.prepare_release:
  extends: .build
  stage: build
  before_script:
    - DOCKER_IMAGE_TAG=${CI_COMMIT_TAG}

# Triggered manual via ChatOps
release:publish:
  extends:
    - .prepare_release
    - .for_release
  rules:
    - if: $BY_TRIGGER == 'true'

run:test:
  stage: test
  allow_failure: false
  image: node:20.9.0-bullseye-slim
  script:
    - npm ci
    - npx jest
  only:
    - main
    - merge_requests

# Must setup this 2 variables below on GitLab CI/CD Variables
# SONAR_TOKEN
# SONAR_HOST_URL
sonarqube:check:
  stage: verify
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true
  allow_failure: true
  only:
    - main
    - merge_requests
    
trivy:scan:release:
  stage: verify
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  services:
    - docker:19-dind
  variables:
    TRIVY_USERNAME: ${CI_REGISTRY_USER}
    TRIVY_PASSWORD: ${CI_REGISTRY_PASSWORD}
    TRIVY_AUTH_URL: ${CI_REGISTRY}
  script:
    - trivy image --output scanning-report.txt --timeout 15m --skip-dirs /var/lib --skip-dirs /var/log --security-checks vuln registry.gitlab.com/onxpnet/exercise-app:${CI_COMMIT_TAG}
    - cat scanning-report.txt
  artifacts:
    reports:
      container_scanning: scanning-report.txt
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

semgrep-sast:
  stage: verify
  extends: .sast-analyzer
  rules:
    - if: $SAST_DISABLED
      when: never
    - if: $SAST_EXCLUDED_ANALYZERS =~ /semgrep/
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      exists:
        - '**/*.py'
        - '**/*.js'
        - '**/*.jsx'
        - '**/*.ts'
        - '**/*.tsx'
        - '**/*.c'
        - '**/*.go'
        - '**/*.java'

nodejs-scan-sast:
  stage: verify
  extends: .sast-analyzer
  rules:
    - if: $SAST_DISABLED
      when: never
    - if: $SAST_EXCLUDED_ANALYZERS =~ /nodejs-scan/
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      exists:
        - '**/package.json'

notify:success:
  stage: notify
  image: curlimages/curl:latest
  script:
    - >
        curl -v -X POST "${DISCORD_WEBHOOKS_URL}" -H "Content-Type: application/json" -d "{\"content\": \"Build Exercise App on develop ([#${CI_PIPELINE_ID}](https://gitlab.com/onxpnet/exercise-app/-/pipelines/${CI_PIPELINE_ID})) has been finished.\", \"username\": \"gitlab-bot\", \"avatar_url\": \"https://cdn.discordapp.com/attachments/892612412014997557/1226787592725463040/gitlab-logo-600.png?ex=662609fa&is=661394fa&hm=ab695f97e42f571d6d98dd5a9f9fa8db1c295fdf16290489b21430069443ce8b&\"}"
  only:
    - main